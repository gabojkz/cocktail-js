{"version":3,"file":"cocktail.mjs.js","sources":["../src/index.js","../src/api.js"],"sourcesContent":["import API from \"./api\";\nimport \"@babel/polyfill\";\n\n// async function API(path) {\n//   const baseURL = \"https://www.thecocktaildb.com/api/json/v1/1/\";\n  \n//   // if you return the promise you can return custom errors or handle\n//   // the error in a different way, the down side is that you write more \n//   // code to handle the error case\n//   return fetch(baseURL + path);\n// }\n\n// /** ------ LAYER DIVISION ------ */\n\n/**\n * Cocktail class\n */\nclass Cocktail  {\n  constructor() {}\n\n  async getDrink(name) {\n    if (!name) return null;\n\n    const response = await ( await API(`search.php?s=${name}`, {\n        mode: 'no-cors'\n      })\n    ).json();\n\n    return response.drinks || null;\n  }\n}\n\nexport default Cocktail;","import fetch from \"node-fetch\";\n\nexport default async function API(path) {\n  const baseURL = \"https://www.thecocktaildb.com/api/json/v1/1/\";\n  \n  // if you return the promise you can return custom errors or handle\n  // the error in a different way, the down side is that you write more \n  // code to handle the error case\n  return fetch(baseURL + path);\n}"],"names":["constructor","name","async","path","fetch","API","json","drinks"],"mappings":"iEAiBA,MACEA,8BAEeC,OACRA,EAAM,OAAO,wBCnBPC,eAAmBC,UAMzBC,EALS,+CAKOD,GDeUE,CAAK,gBAAeJ,MAGjDK,QAEcC,QAAU"}