{"version":3,"file":"cocktail.mjs.js","sources":["../src/index.js","../src/api.js"],"sourcesContent":["import API from \"./api\";\nimport \"@babel/polyfill\";\n\n/**\n * @class Cocktail\n */\nexport default class Cocktail  {\n  constructor() {}\n\n  /**\n   * get a drink\n   * @method getDrink \n   * @param {string} name \n   * @returns {Promise} - drink full description, recipe, ingridients\n   */\n  async getDrink(name) {\n    if (!name) return null;\n\n    const response = await ( await API(`search.php?s=${name}`, {\n        mode: 'no-cors'\n      })\n    ).json();\n\n    return response.drinks || null;\n  }\n}","import fetch from \"node-fetch\";\n\n/**\n * make api call\n * @param {string} path \n * @returns {Promise}\n */\nexport default async function API(path) {\n  const baseURL = \"https://www.thecocktaildb.com/api/json/v1/1/\";\n  \n  // if you return the promise you can return custom errors or handle\n  // the error in a different way, the down side is that you write more \n  // code to handle the error case\n  return fetch(baseURL + path);\n}"],"names":["constructor","name","async","path","fetch","API","json","drinks"],"mappings":"iEAMe,MACbA,8BAQeC,OACRA,EAAM,OAAO,wBCTPC,eAAmBC,UAMzBC,EALS,+CAKOD,GDKUE,CAAK,gBAAeJ,MAGjDK,QAEcC,QAAU"}